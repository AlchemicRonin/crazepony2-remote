/*
      ____                      _____                  +---+
     / ___\                     / __ \                 | R |
    / /                        / /_/ /                 +---+
   / /   ________  ____  ___  / ____/___  ____  __   __
  / /  / ___/ __ `/_  / / _ \/ /   / __ \/ _  \/ /  / /
 / /__/ /  / /_/ / / /_/  __/ /   / /_/ / / / / /__/ /
 \___/_/   \__,_/ /___/\___/_/    \___ /_/ /_/____  /
                                                 / /
                                            ____/ /
                                           /_____/
main.c file
编写者：
作者E-mail：
编译环境：MDK-Lite  Version: 1.0
初版时间: 2017-2-27
功能：
------------------------------------
*/
#include "UART1.h"
#include "stdio.h"
#include "Control.h"
#include "stm32f10x_it.h"
#include "math.h"
#include "led.h"
#include "ConfigTable.h"

//uart reicer flag
#define b_uart_head  0x80
#define b_rx_over    0x40
uint8_t modifyOnceFlag = 1;

//////////////////////////////////////////////////////////////////
//加入以下代码,支持printf函数,而不需要选择use MicroLIB	  
#if 1
#pragma import(__use_no_semihosting)             
//标准库需要的支持函数                 
struct __FILE 
{ 
	int handle; 
	/* Whatever you require here. If the only file you are using is */ 
	/* standard output using printf() for debugging, no file handling */ 
	/* is required. */ 
}; 
/* FILE is typedef’ d in stdio.h. */ 
FILE __stdout;       
//定义_sys_exit()以避免使用半主机模式    
_sys_exit(int x) 
{ 
	x = x; 
} 
//重定义fputc函数 
int fputc(int ch, FILE *f)
{      
	while((USART1->SR&0X40)==0);//循环发送,直到发送完毕   
	USART1->DR = (u8) ch;      
	return ch;
}
#endif 

static void checkData(void);
static void reduceOnlineCmd(uint8_t cmd);

/**************************实现函数********************************************
*函数原型:		void U1NVIC_Configuration(void)
*功　　能:		串口1中断配置
输入参数：无
输出参数：没有	
*******************************************************************************/
void UART1NVIC_Configuration(void)
{
        NVIC_InitTypeDef NVIC_InitStructure; 
        /* Enable the USART1 Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        NVIC_Init(&NVIC_InitStructure);
}



/**************************实现函数********************************************
*函数原型:		void Initial_UART1(u32 baudrate)
*功　　能:		初始化UART1
输入参数：u32 baudrate   设置RS232串口的波特率
输出参数：没有	
*******************************************************************************/
void UART1_init(u32 pclk2,u32 bound)
{  	 
	float temp;
	u16 mantissa;
	u16 fraction;	   
	temp=(float)(pclk2*1000000)/(bound*16);//得到USARTDIV
	mantissa=temp;				 //得到整数部分
	fraction=(temp-mantissa)*16; //得到小数部分	 
  mantissa<<=4;
	mantissa+=fraction; 
	RCC->APB2ENR|=1<<2;   //使能PORTA口时钟  
	RCC->APB2ENR|=1<<14;  //使能串口时钟 
	GPIOA->CRH&=0XFFFFF00F;//IO状态设置
	GPIOA->CRH|=0X000008B0;//IO状态设置
	RCC->APB2RSTR|=1<<14;   //复位串口1
	RCC->APB2RSTR&=~(1<<14);//停止复位	   	   
	//波特率设置
 	USART1->BRR=mantissa; // 波特率设置	 
	USART1->CR1|=0X200C;  //1位停止,无校验位.
  USART1->CR1|=1<<8;    //PE中断使能
	USART1->CR1|=1<<5;    //接收缓冲区非空中断使能	    	
 
  UART1NVIC_Configuration();//中断配置
  
  
  UartTxbuf.Wd_Indx = 0;
  UartTxbuf.Rd_Indx = 0;
  UartTxbuf.Mask = TX_BUFFER_SIZE - 1;
  UartTxbuf.pbuf = &tx_buffer[0];
  
  UartRxbuf.Wd_Indx = 0;
  UartRxbuf.Rd_Indx = 0;
  UartRxbuf.Mask = RX_BUFFER_SIZE - 1;
  UartRxbuf.pbuf = &rx_buffer[0];
  
  
//  printf("MCU clock frequency:%dMHz \r\n",pclk2);
//  printf("UART 1 baud frequency:%d \r\n",bound);
 
  
}

/**************************实现函数********************************************
*函数原型:		void UART1_Put_Char(unsigned char DataToSend)
*功　　能:		RS232发送一个字节
输入参数：
		unsigned char DataToSend   要发送的字节数据
输出参数：没有	
*******************************************************************************/
void UART1_Put_Char(unsigned char DataToSend)
{
  UartBuf_WD(&UartTxbuf,DataToSend);//将待发送数据放在环形缓冲数组中
  USART_ITConfig(USART1, USART_IT_TXE, ENABLE);  //启动发送中断开始啪啪啪发送缓冲中的数据
}


// uint8_t Uart1_Put_Char(unsigned char DataToSend)
// {
//   UartBuf_WD(&UartTxbuf,DataToSend);//将待发送数据放在环形缓冲数组中
//   USART_ITConfig(USART1, USART_IT_TXE, ENABLE);  //启动发送中断开始啪啪啪发送缓冲中的数据
// 	 return DataToSend;
// }

//环形 数组结构体实例化两个变量
UartBuf UartTxbuf;//环形发送结构体
UartBuf UartRxbuf;//环形接收结构体

unsigned char rx_buffer[RX_BUFFER_SIZE];
unsigned char tx_buffer[TX_BUFFER_SIZE];

//读取环形数据中的一个字节
uint8_t UartBuf_RD(UartBuf *Ringbuf)
{
  uint8_t temp;
  temp = Ringbuf->pbuf[Ringbuf->Rd_Indx & Ringbuf->Mask];//数据长度掩码很重要，这是决定数据环形的关键
  Ringbuf->Rd_Indx++;//读取完成一次，读指针加1，为下一次 读取做 准备
  return temp;
}
//将一个字节写入一个环形结构体中
void UartBuf_WD(UartBuf *Ringbuf,uint8_t DataIn)
{
  
  Ringbuf->pbuf[Ringbuf->Wd_Indx & Ringbuf->Mask] = DataIn;//数据长度掩码很重要，这是决定数据环形的关键
  Ringbuf->Wd_Indx++;//写完一次，写指针加1，为下一次写入做准备

}
//环形数据区的可用字节长度，当写指针写完一圈，追上了读指针
//那么证明数据写满了，此时应该增加缓冲区长度，或者缩短外围数据处理时间
uint16_t UartBuf_Cnt(UartBuf *Ringbuf)
{
  return (Ringbuf->Wd_Indx - Ringbuf->Rd_Indx) & Ringbuf->Mask;//数据长度掩码很重要，这是决定数据环形的关键
}

void UartBufClear(UartBuf *Ringbuf)
{
	Ringbuf->Rd_Indx=Ringbuf->Wd_Indx;
}

void UartSendBuffer(uint8_t *dat, uint8_t len)
{
uint8_t i;
	
	for(i=0;i<len;i++)
	{
		UartBuf_WD(&UartTxbuf,*dat);
		dat++;
	}
	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);  //启动发送中断开始啪啪啪发送缓冲中的数据
}



volatile uint8_t Udatatmp;//串口接收临时数据字节


//------------------------------------------------------
void USART1_IRQHandler(void)
{
	
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
  {
		USART_ClearITPendingBit(USART1, USART_IT_RXNE);//清除接收中断标志
		Udatatmp = (uint8_t) USART_ReceiveData(USART1);
		UartBuf_WD(&UartRxbuf,Udatatmp);
	}
}

void reduceOnlineData(void)
{

	if(UartRxbuf.pbuf[0] != '$')
	{
		
		UartRxbuf.pbuf[0] = '\0';
	}else if(UartRxbuf.pbuf[1] != 'M')
	{
		UartRxbuf.pbuf[0] = '\0';
		UartRxbuf.pbuf[1] = '\0';
	}else if(UartRxbuf.pbuf[2] != '<')
	{
		UartRxbuf.pbuf[0] = '\0';
		UartRxbuf.pbuf[1] = '\0';
		UartRxbuf.pbuf[2] = '\0';
	}
	else
	{

		checkData();
		UartRxbuf.pbuf[0] = '\0';
		UartRxbuf.pbuf[1] = '\0';
		UartRxbuf.pbuf[2] = '\0';

	}
	
	UartRxbuf.Wd_Indx = 0;
}
void reduceOnlineCmd(uint8_t cmd)
{
	switch(cmd)
	{
		case ONLINE_MOTOR:
		case ONLINE_STICK:
			remoteData.motor[0] = 1000+(UartRxbuf.pbuf[4]<<2);
			remoteData.motor[1] = 1000+(UartRxbuf.pbuf[5]<<2);
			remoteData.motor[2] = 1000+(UartRxbuf.pbuf[6]<<2);
			remoteData.motor[3] = 1000+(UartRxbuf.pbuf[7]<<2);		
			if(cmd == ONLINE_MOTOR)
			{
				remoteData.cmd |= MOTOR;
				
			}
			else
			{
				remoteData.cmd &= (~MOTOR);
			}
			break;
		case ONLINE_ARM:
			
			if((remoteData.cmd & ARM) == 0)
			{
				remoteData.cmd |= ARM;				
				remoteData.cmd &= (~MOTOR);
				remoteData.motor[0] = 1500;
				remoteData.motor[1] = 1500;
				remoteData.motor[2] = 1500;
				remoteData.motor[3] = 1000;
			}
			break;
		case ONLINE_DISARM:
			if(remoteData.cmd & ARM)
			{
				remoteData.cmd &= (~ARM);											
			}
			remoteData.motor[0] = 1000;
			remoteData.motor[1] = 1000;
			remoteData.motor[2] = 1000;
			remoteData.motor[3] = 1000;	
			break;
		case ONLINE_CALIBRATION:
			remoteData.cmd |= CALIBRATION;
			break;
		case ONLINE_LED:
			remoteData.led = UartRxbuf.pbuf[8];
			break;
		case ONLINE_COLOR:
			remoteData.color = UartRxbuf.pbuf[9];
			break;
		case ONLINE_ALTHOLD:
			if((remoteData.cmd & ALTHOLD) == 0)
			{
				remoteData.cmd |= ALTHOLD;
			}
			break;
		case ONLINE_NOTALTHOLD:
			if(remoteData.cmd & ALTHOLD)
			{
				remoteData.cmd &= (~ALTHOLD);
			}
			break;
		case ONLINE_BEEP:
			remoteData.beep = UartRxbuf.pbuf[10];
			break;
		default:
			break;
	}
}
void checkData(void)
{
	uint8_t checkNum = 0;
	uint8_t i,n = 11;
	for(i = 3; i < n; i++)
	{
		checkNum ^= UartRxbuf.pbuf[i];
	}
	
	if(checkNum == UartRxbuf.pbuf[n])
	{
		reduceOnlineCmd(UartRxbuf.pbuf[3]);		
	}
}

void modifyAddress(void)
{
	
	static uint8_t ledFlag = 1;
	static uint8_t timeCount = 0;
	if(modifyOnceFlag)
	{
		modifyOnceFlag = 0;
		TX_ADDRESS[0] = 0x11;
		TX_ADDRESS[1] = 0xff;
		TX_ADDRESS[2] = 0xff;
		TX_ADDRESS[3] = 0xff;
		TX_ADDRESS[4] = 0xff;
		SetTX_Mode();
		remoteData.motor[2] = micros();
		remoteData.motor[3] = micros()>>8;
		TX_ADDRESS[0] = remoteData.motor[2];
		TX_ADDRESS[1] = remoteData.motor[2] >> 8;
		TX_ADDRESS[2] = remoteData.motor[3];
		TX_ADDRESS[3] = remoteData.motor[3] >> 8;
		RX_ADDRESS[0] = TX_ADDRESS[0]+1;
		RX_ADDRESS[1] = TX_ADDRESS[1];
		RX_ADDRESS[2] = TX_ADDRESS[2];
		RX_ADDRESS[3] = TX_ADDRESS[3];
		remoteData.motor[0] = 1500;
		remoteData.motor[1] = 1500;
		SaveParamsToEEPROM();
	}
	timeCount++;
	LedSet(1,ledFlag);
	LedSet(2,ledFlag);
	LedSet(3,ledFlag);
	if(timeCount == 255)
	{
		ledFlag = !ledFlag;
		timeCount = 0;
	}
}


